name: ESLint Code Quality

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  eslint:
    name: Code Quality Check
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        id: eslint
        run: |
          npx eslint . \
            --ext .js,.jsx,.ts,.tsx \
            --format json \
            --output-file eslint-results.json \
            --max-warnings 0 || true
        continue-on-error: true
        
      - name: Annotate ESLint results
        if: always()
        uses: ataylorme/eslint-annotate-action@v2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          report-json: "eslint-results.json"
          only-pr-files: true
          
      - name: Upload ESLint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-results
          path: eslint-results.json
          retention-days: 7
          
      - name: Generate ESLint summary
        if: always()
        run: |
          if [ -f eslint-results.json ほerrors! ]; then
            echo "## ESLint Report Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Parse JSON and create summary
            node -e "
              const fs = require('fs');
              const results = JSON.parse(fs.readFileSync('eslint-results.json', 'utf8'));
              
              let errorCount = 0;
              let warningCount = 0;
              let fileCount = 0;
              
              results.forEach(file => {
                if (file.errorCount > 0 || file.warningCount > 0) {
                  fileCount++;
                  errorCount += file.errorCount;
                  warningCount += file.warningCount;
                }
              });
              
              console.log('### Statistics');
              console.log('- **Files with issues:** ' + fileCount);
              console.log('- **Errors:** ' + errorCount);
              console.log('- **Warnings:** ' + warningCount);
              console.log('');
              
              if (errorCount > 0 || warningCount > 0) {
                console.log('### Files with issues:');
                results.forEach(file => {
                  if (file.errorCount > 0 || file.warningCount > 0) {
                    const filename = file.filePath.replace(process.cwd() + '/', '');
                    console.log('- **' + filename + '**: ' + file.errorCount + ' errors, ' + file.warningCount + ' warnings');
                  }
                });
              } else {
                console.log('✅ **No ESLint issues found!**');
              }
            " >> $GITHUB_STEP_SUMMARY
          else
            echo "## ESLint Report" >> $GITHUB_STEP_SUMMARY
            echo "❌ ESLint execution failed or no results were generated." >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Set workflow status
        if: always()
        run: |
          if [ -f eslint-results.json ]; then
            ERROR_COUNT=$(node -e "const r=JSON.parse(require('fs').readFileSync('eslint-results.json','utf8'));console.log(r.reduce((a,f)=>a+f.errorCount,0))")
            if [ "$ERROR_COUNT" -gt "0" ]; then
              echo "❌ ESLint found $ERROR_COUNT error(s)"
              echo "ESLINT_STATUS=failed" >> $GITHUB_ENV
            else
              echo "✅ ESLint check passed"
              echo "ESLINT_STATUS=passed" >> $GITHUB_ENV
            fi
          else
            echo "❌ ESLint check could not be completed"
            echo "ESLINT_STATUS=error" >> $GITHUB_ENV
          fi
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('eslint-results.json')) {
              return;
            }
            
            const results = JSON.parse(fs.readFileSync('eslint-results.json', 'utf8'));
            
            let errorCount = 0;
            let warningCount = 0;
            let fileCount = 0;
            
            results.forEach(file => {
              if (file.errorCount > 0 || file.warningCount > 0) {
                fileCount++;
                errorCount += file.errorCount;
                warningCount += file.warningCount;
              }
            });
            
            const status = errorCount > 0 ? '❌' : '✅';
            const title = errorCount > 0 ? 'ESLint found issues' : 'ESLint check passed';
            
            let body = `## ${status} ${title}\n\n`;
            body += `### Summary\n`;
            body += `- **Files with issues:** ${fileCount}\n`;
            body += `- **Errors:** ${errorCount}\n`;
            body += `- **Warnings:** ${warningCount}\n\n`;
            
            if (fileCount > 0) {
              body += `### Top files with issues:\n`;
              const topFiles = results
                .filter(f => f.errorCount > 0 || f.warningCount > 0)
                .sort((a, b) => (b.errorCount + b.warningCount) - (a.errorCount + a.warningCount))
                .slice(0, 5);
              
              topFiles.forEach(file => {
                const filename = file.filePath.replace(process.cwd() + '/', '');
                body += `- **${filename}**: ${file.errorCount} errors, ${file.warningCount} warnings\n`;
              });
              
              if (fileCount > 5) {
                body += `\n_And ${fileCount - 5} more files..._\n`;
              }
            }
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ESLint')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }